# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - master
    - feature/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  disable.coverage.autogenerate: 'true'

steps:
  - task: UseDotNet@2
    displayName: "Install .Net Core 2 for SonarQube"
    inputs:
      packageType: 'runtime'
      version: '2.0.0'
  - task: UseDotNet@2
    displayName: "Install .Net Core 3.x"
    inputs:
      packageType: 'sdk'
      version: '3.x'
  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: 'SonarCloud'
      organization: 'fgi'
      scannerMode: 'MSBuild'
      projectKey: 'ComplianceReporting'
      projectName: 'ComplianceReporting'
      extraProperties: |
        sonar.exclusions=**/obj/**,**/*.dll
        sonar.branch.name=$(Build.SourceBranchName)
        sonar.msbuild.testProjectPattern=.*test\.csproj$
        sonar.cobertura.reportPath=$(Agent.TempDirectory)/**/coverage.cobertura.xml
  - task: DotNetCoreCLI@2
    displayName: "Build application"
    inputs:
      command: 'build'
      projects: '**/*.sln'
  - task: DotNetCoreCLI@2
    displayName: "Unit-test application"
    inputs:
      command: 'test'
      projects: '**/*.Unittest.csproj'
      arguments: -c $(BuildConfiguration) --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true
  - task: SonarCloudAnalyze@1
  - task: SonarCloudPublish@1
    inputs:
      pollingTimeoutSec: '300'
  - task: DotNetCoreCLI@2
    displayName: Install ReportGenerator tool
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path . dotnet-reportgenerator-globaltool
  - task: reportgenerator@4
    displayName: Generate Code Coverage Report
    inputs:
      reports: $(Agent.TempDirectory)/**/coverage.cobertura.xml
      targetdir: $(build.artifactstagingdirectory)/TestResults/
      reporttypes: 'HtmlInline_AzurePipelines;Cobertura'
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: cobertura
      summaryFileLocation: $(build.artifactstagingdirectory)/TestResults/Cobertura.xml
      # To make the task not regenerate the report an environment variable was added to the pipeline in Azure DevOps; "disable.coverage.autogenerate: 'true'"
      # see: https://github.com/danielpalme/ReportGenerator/wiki/Integration#attention
      reportDirectory: '$(build.artifactstagingdirectory)/TestResults'