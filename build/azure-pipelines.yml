# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  disable.coverage.autogenerate: 'true'

steps:
  - task: UseDotNet@2
    displayName: "Install .Net Core 3.x"
    inputs:
      packageType: 'sdk'
      version: '3.x'
  - task: DotNetCoreCLI@2
    displayName: "Build application"
    inputs:
      command: 'build'
      projects: '**/*.sln'
  - task: DotNetCoreCLI@2
    displayName: "Unit-test application"
    inputs:
      command: 'test'
      modifyOutputPath: true
      projects: '**/*.Unittest.csproj'
      arguments: '--collect:"XPlat Code Coverage" -p:CollectCoverage=true -p:CoverletOutputFormat=cobertura -p:Exclude="[*test]*"'
  - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
    displayName: Generate Code Coverage Report
    inputs:
      reports: $(Build.SourcesDirectory)/tests/**/coverage.cobertura.xml
      targetdir: $(build.artifactstagingdirectory)/TestResults/
      reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: cobertura
      summaryFileLocation: $(build.artifactstagingdirectory)/TestResults/cobertura.xml
      # To make the task not regenerate the report an environment variable was added to the pipeline in Azure DevOps; "disable.coverage.autogenerate: 'true'"
      # see: https://github.com/danielpalme/ReportGenerator/wiki/Integration#attention
      reportDirectory: '$(build.artifactstagingdirectory)/TestResults'