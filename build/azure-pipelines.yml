# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - master
    - feature/*

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: SPECTRAL_DSN
- name: disable.coverage.autogenerate
  value: 'true'

steps:
  - task: CmdLine@2
    displayName: Checkout $(Build.SourceBranchName)
    inputs:
      script: 'git checkout $(Build.SourceBranchName)'
  - script: curl -L 'https://get.spectralops.io/latest/x/sh?dsn=$(SPECTRAL_DSN)' | sh
    displayName: 'Install Spectral'
  - script: $HOME/.spectral/spectral scan --ok --dsn $(SPECTRAL_DSN)
    displayName: 'Spectral Scan'
  - task: UseDotNet@2
    displayName: "Install .Net Core 2 for SonarQube"
    inputs:
      packageType: 'runtime'
      version: '2.0.0'
  - task: UseDotNet@2
    displayName: "Install .Net Core 3.x"
    inputs:
      packageType: 'sdk'
      version: '3.x'
  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: 'SonarCloud'
      organization: 'fgi'
      scannerMode: 'MSBuild'
      projectKey: 'ComplianceReporting'
      projectName: 'ComplianceReporting'
      extraProperties: |
        sonar.exclusions=**/obj/**,**/*.dll
        sonar.msbuild.testProjectPattern=.*test\.csproj$
        sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/coverage/*/coverage.opencover.xml

  - script: dotnet build AzureDevOps.ReportingTool.sln --configuration "Debug"
    displayName: 'dotnet build Debug'

  - script: |
      dotnet test --logger trx --no-build /p:CollectCoverage=true  /p:CoverletOutputFormat='opencover' /p:CoverletOutput=$(Build.SourcesDirectory)/coverage/reports/ /p:exclude=\"[Microsoft*]*,[xunit*]*\" test/AzureDevOps.Report.Unittest/AzureDevOps.Report.Unittest.csproj
    displayName: 'dotnet test Reports'

  - script: |
      dotnet test --logger trx --no-build /p:CollectCoverage=true  /p:CoverletOutputFormat='opencover' /p:CoverletOutput=$(Build.SourcesDirectory)/coverage/reportingtool/ /p:exclude=\"[Microsoft*]*,[xunit*]*\" test/AzureDevOps.ReportingTool.Unittest/AzureDevOps.ReportingTool.Unittest.csproj
    displayName: 'dotnet test ReportTool'

  - script: |
      dotnet test --logger trx --no-build /p:CollectCoverage=true  /p:CoverletOutputFormat='opencover' /p:CoverletOutput=$(Build.SourcesDirectory)/coverage/scanner/ /p:exclude=\"[Microsoft*]*,[xunit*]*\" test/AzureDevOps.Scanner.Unittest/AzureDevOps.Scanner.Unittest.csproj
    displayName: 'dotnet test Scanner'

  - script: |
      dotnet tool install dotnet-reportgenerator-globaltool --tool-path . 
      ./reportgenerator "-reports:$(Build.SourcesDirectory)/coverage/*/coverage.opencover.xml" "-targetdir:coverage/Cobertura" "-reporttypes:Cobertura;HTMLInline;HTMLChart"
    condition: eq( variables['Agent.OS'], 'Linux' )
    displayName: 'Run Reportgenerator on Linux, join reports'

  - task: SonarCloudAnalyze@1

  - task: SonarCloudPublish@1
    displayName: 'Publish Quality Gate Results'

  - task: PublishTestResults@2
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'

  - task: PublishCodeCoverageResults@1
    inputs:
      summaryFileLocation: $(Build.SourcesDirectory)/coverage/Cobertura/Cobertura.xml
      reportDirectory: $(Build.SourcesDirectory)/coverage/Cobertura/
      codecoverageTool: cobertura

  - task: DotNetCoreCLI@2
    displayName: 'Publish dotnet output'
    inputs:
      command: publish
      arguments: '--configuration Debug --output $(Build.ArtifactStagingDirectory)'
      projects: '**/*.sln'
      publishWebProjects: false
      modifyOutputPath: true
      zipAfterPublish: true
  
  - task: PublishBuildArtifacts@1
