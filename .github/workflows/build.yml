name: "Simple build"

# Triggers the workflow on push or pull request events
on: [push, pull_request]

permissions: read-all

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup dotnet 3.1
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
          include-prerelease: true
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore AzureDevOps.ReportingTool.sln
      - name: Dotnet test Reports
        run: dotnet test --logger trx /p:CollectCoverage=true  /p:CoverletOutputFormat='opencover' /p:CoverletOutput=./coverage/reports/ /p:exclude=\"[Microsoft*]*,[xunit*]*\" test/AzureDevOps.Report.Unittest/AzureDevOps.Report.Unittest.csproj
      - name: Dotnet test ReportTool
        run: dotnet test --logger trx /p:CollectCoverage=true  /p:CoverletOutputFormat='opencover' /p:CoverletOutput=./coverage/reportingtool/ /p:exclude=\"[Microsoft*]*,[xunit*]*\" test/AzureDevOps.ReportingTool.Unittest/AzureDevOps.ReportingTool.Unittest.csproj
      - name: Dotnet test Scanner
        run: dotnet test --logger trx /p:CollectCoverage=true  /p:CoverletOutputFormat='opencover' /p:CoverletOutput=./coverage/scanner/ /p:exclude=\"[Microsoft*]*,[xunit*]*\" test/AzureDevOps.Scanner.Unittest/AzureDevOps.Scanner.Unittest.csproj
      - name: Concatenate test report
        run: |
          dotnet tool install dotnet-reportgenerator-globaltool --tool-path . 
          ./reportgenerator "-reports:./coverage/*/coverage.opencover.xml" "-targetdir:coverage/Cobertura" "-reporttypes:Cobertura;HTMLInline;HTMLChart"
      - name: Upload dotnet test results
        uses: actions/upload-artifact@v2
        with:
          name: dotnet-results-3.1
          path: coverage/Cobertura
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}          